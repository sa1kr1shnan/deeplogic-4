mport json
import re

def generate_optimized_invoice_template():
    template = {
        "header": {
            "invoice_number": {
                "rules": [
                    {"pattern": r"(?i)invoice\s*(?:no|num|number|#)[:.]?\s*(\w+)"},
                    {"pattern": r"(?i)(?:no|num|number|#)[:.]?\s*(\w+)"}
                ]
            },
            "invoice_date": {
                "rules": [
                    {"pattern": r"(?i)(?:date|issued|invoice\s*date)[:.]?\s*(\d{1,2}[-./]\d{1,2}[-./]\d{2,4})"},
                    {"pattern": r"(?i)(\d{1,2}[-./]\d{1,2}[-./]\d{2,4})"}
                ]
            },
            "customer_number": {
                "rules": [
                    {"pattern": r"(?i)(?:customer|client|account)\s*(?:no|num|number|#)[:.]?\s*(\w+)"}
                ]
            },
            "invoice_period": {
                "rules": [
                    {"pattern": r"(?i)(?:period|duration|dates)[:.]?\s*(.+)"}
                ]
            },
            "vendor_info": {
                "rules": [
                    {"pattern": r"(.+?)(?=\n.+\n.+\n)"},  # Assumes vendor info is at the top
                    {"fields": ["name", "address", "vat_number"]}
                ]
            },
            "customer_info": {
                "rules": [
                    {"pattern": r"(?<=\n\n)(.+?\n.+?\n.+?)(?=\n\n)"},  # Assumes customer info block
                    {"fields": ["name", "contact", "address"]}
                ]
            }
        },
        "service_description": {
            "rules": [
                {"pattern": r"(?i)service\s*description.+?(?=\n\s*total)", "flags": re.DOTALL},
                {"columns": ["description", "amount", "quantity"]}
            ]
        },
        "totals": {
            "subtotal": {
                "rules": [
                    {"pattern": r"(?i)(?:subtotal|total|sum)[:.]?\s*([0-9,.]+)"}
                ]
            },
            "vat": {
                "rules": [
                    {"pattern": r"(?i)vat\s*(\d+)%\s*([0-9,.]+)"},
                    {"fields": ["rate", "amount"]}
                ]
            },
            "gross_amount": {
                "rules": [
                    {"pattern": r"(?i)(?:gross|total)\s*(?:amount|sum)[:.]?\s*([0-9,.]+)"}
                ]
            }
        },
        "transaction_fees": {
            "rules": [
                {"pattern": r"(?i)T\d[:.].*?G\d[:.].*?(?=\n\n)", "flags": re.DOTALL},
                {"columns": ["category", "price"]}
            ]
        },
        "user_accounts": {
            "rules": [
                {"pattern": r"(?i)user-account-.*?(?=\n\n)", "flags": re.DOTALL},
                {"columns": ["account", "query_counts", "total_amount"]}
            ]
        },
        "query_references": {
            "rules": [
                {"pattern": r"(?i)query\s*reference:.*?(?=\n\n)", "flags": re.DOTALL},
                {"columns": ["reference", "query_counts", "total_amount"]}
            ]
        },
        "payment_info": {
            "terms": {
                "rules": [
                    {"pattern": r"(?i)terms\s*of\s*payment:(.+?)(?=\n\n)"}
                ]
            },
            "bank_details": {
                "rules": [
                    {"pattern": r"(?i)iban[:.]\s*(\w+)"},
                    {"pattern": r"(?i)bic[:.]\s*(\w+)"}
                ]
            }
        },
        "additional_info": {
            "website": {
                "rules": [
                    {"pattern": r"(https?://\S+)"}
                ]
            }
        }
    }

    return template
# Efficiency enhancement: Compile regex patterns
def compile_regex_patterns(template):
    compiled_patterns = {}
    for section, content in template.items():
        if isinstance(content, dict):
            if 'rules' in content:
                compiled_patterns[section] = []
                for rule in content['rules']:
                    if 'pattern' in rule:
                        flags = rule.get('flags', 0)
                        compiled_patterns[section].append(re.compile(rule['pattern'], flags))
            else:
                compiled_patterns[section] = compile_regex_patterns(content)
    return compiled_patterns

# Generating the template
template = generate_optimized_invoice_template()

# Compiling patterns (separate from the template)
compiled_patterns = compile_regex_patterns(template)

# Example usage of the optimized template
def extract_data(text, template, compiled_patterns):
    extracted_data = {}
    for section, content in template.items():
        if isinstance(content, dict) and 'rules' in content:
            for pattern in compiled_patterns[section]:
                match = pattern.search(text)
                if match:
                    extracted_data[section] = match.group(1)
                    break
        elif isinstance(content, dict):
            extracted_data[section] = extract_data(text, content, compiled_patterns[section])
    return extracted_data

# Printing the JSON-serializable template
print(json.dumps(template, indent=2))


with open('optimized_invoice_template.json', 'w') as f:
    json.dump(template, f, indent=2)

print("\nOptimized template generated and saved.")

# Example of how to use the extraction function
sample_text = """
Invoice No: INV-12345
Date: 15/03/2024
Customer: ACME Corp
Total Amount: $1,234.56
VAT 20%: $246.91
Gross Total: $1,481.47
"""

extracted_data = extract_data(sample_text, template, compiled_patterns)
print("\nExtracted Data:")
print(json.dumps(extracted_data, indent=2))

